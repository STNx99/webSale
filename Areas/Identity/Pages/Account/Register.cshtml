@page
@model RegisterModel
@{
    ViewData["Title"] = "Register";
}

<div class="auth-container">
    <div class="auth-form">
        <h2 class="auth-title">@ViewData["Title"]</h2>
        <p class="auth-subtitle">Create a new account</p>
        
        <form id="registerForm" asp-route-returnUrl="@Model.ReturnUrl" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
            
            <div class="form-floating mb-3 position-relative">
                <input asp-for="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label asp-for="Input.Email">Email</label>
                <span asp-validation-for="Input.Email" class="text-danger"></span>
                <div class="position-absolute end-0 top-50 translate-middle-y me-3">
                    <i class="bi bi-envelope text-muted"></i>
                </div>
            </div>
            
            <div class="form-floating mb-3 position-relative">
                <input asp-for="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" type="password" id="password-field" />
                <label asp-for="Input.Password">Password</label>
                <span asp-validation-for="Input.Password" class="text-danger"></span>
                <div class="position-absolute end-0 top-50 translate-middle-y me-3">
                    <i class="bi bi-eye-slash text-muted toggle-password" data-target="password-field"></i>
                </div>
            </div>
            
            <div class="form-floating mb-4 position-relative">
                <input asp-for="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" type="password" id="confirm-password-field" />
                <label asp-for="Input.ConfirmPassword">Confirm Password</label>
                <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
                <div class="position-absolute end-0 top-50 translate-middle-y me-3">
                    <i class="bi bi-eye-slash text-muted toggle-password" data-target="confirm-password-field"></i>
                </div>
            </div>
            
            <div class="password-strength mb-3 d-none" id="password-strength-meter">
                <p class="mb-1">Password strength: <span id="password-strength-text">None</span></p>
                <div class="progress" style="height: 5px;">
                    <div id="password-strength-progress" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
            </div>
            
            <div class="d-grid gap-2 mb-3">
                <button id="registerSubmit" type="submit" class="btn btn-primary">
                    <i class="bi bi-person-plus me-2"></i>Register
                </button>
            </div>
            
            <div class="text-center mb-3">
                <p>
                    Already have an account? <a asp-page="./Login" asp-route-returnUrl="@Model.ReturnUrl">
                        <i class="bi bi-box-arrow-in-right me-1"></i>Sign in
                    </a>
                </p>
            </div>
        </form>

        <hr class="my-4">
        
        <div class="text-center">
            <h5 class="mb-3">Or register with</h5>
            
            @{
                if ((Model.ExternalLogins?.Count ?? 0) == 0)
                {
                    <div class="alert alert-info" role="alert">
                        <i class="bi bi-info-circle me-2"></i>
                        No external authentication services configured.
                    </div>
                }
                else
                {
                    <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post">
                        <div class="d-flex justify-content-center gap-2">
                            @foreach (var provider in Model.ExternalLogins!)
                            {
                                <button type="submit" class="btn btn-outline-secondary" 
                                        name="provider" value="@provider.Name" 
                                        title="Register using your @provider.DisplayName account">
                                    @provider.DisplayName
                                </button>
                            }
                        </div>
                    </form>
                }
            }
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Show/hide password toggle
        document.addEventListener('DOMContentLoaded', function() {
            const togglePassword = document.querySelectorAll('.toggle-password');
            
            togglePassword.forEach(button => {
                button.addEventListener('click', function() {
                    const targetId = this.getAttribute('data-target');
                    const passwordInput = document.getElementById(targetId);
                    
                    if (passwordInput.type === 'password') {
                        passwordInput.type = 'text';
                        this.classList.replace('bi-eye-slash', 'bi-eye');
                    } else {
                        passwordInput.type = 'password';
                        this.classList.replace('bi-eye', 'bi-eye-slash');
                    }
                });
            });

            // Password strength meter
            const passwordInput = document.getElementById('password-field');
            const strengthMeter = document.getElementById('password-strength-meter');
            const strengthText = document.getElementById('password-strength-text');
            const strengthProgress = document.getElementById('password-strength-progress');
            
            passwordInput.addEventListener('input', function() {
                const password = this.value;
                
                if (password.length > 0) {
                    strengthMeter.classList.remove('d-none');
                    
                    // Simple password strength calculation
                    let strength = 0;
                    const patterns = [
                        /[a-z]/, // lowercase
                        /[A-Z]/, // uppercase
                        /[0-9]/, // digits
                        /[^a-zA-Z0-9]/ // special characters
                    ];
                    
                    patterns.forEach(pattern => {
                        if (pattern.test(password)) {
                            strength += 25;
                        }
                    });
                    
                    // Adjust for length
                    if (password.length < 6) {
                        strength = Math.min(strength, 40);
                    } else if (password.length > 10) {
                        strength = Math.min(strength + 20, 100);
                    }
                    
                    // Update UI
                    strengthProgress.style.width = strength + '%';
                    strengthProgress.setAttribute('aria-valuenow', strength);
                    
                    // Set color based on strength
                    if (strength < 30) {
                        strengthProgress.classList.remove('bg-warning', 'bg-success');
                        strengthProgress.classList.add('bg-danger');
                        strengthText.textContent = 'Weak';
                    } else if (strength < 70) {
                        strengthProgress.classList.remove('bg-danger', 'bg-success');
                        strengthProgress.classList.add('bg-warning');
                        strengthText.textContent = 'Medium';
                    } else {
                        strengthProgress.classList.remove('bg-danger', 'bg-warning');
                        strengthProgress.classList.add('bg-success');
                        strengthText.textContent = 'Strong';
                    }
                } else {
                    strengthMeter.classList.add('d-none');
                }
            });
        });
    </script>
}
